
{



}

/*******************************************************************
* Function Name: externalFunction
* Description: the Network gets input from outside
********************************************************************/
Model &SimpleDemux::externalFunction( const ExternalMessage &msg ){




	if (msg.port() == inroute){
		//routing=true;
		int inpeer, TTL, messageId, query, toId;
		query = getFirstField(msg.value());
		toId = getThirdField(msg.value());
		inpeer = getFourthField(msg.value());
		TTL= getFifthField(msg.value());
		messageId = getSecondField(msg.value());

		if(VERBOSE) cout<<"about to route a message from"<<inpeer<<"\n";



			EvQ.push(makeNetEvent(messageId, inpeer, TTL, 0.0f, query, toId)); //enqueue a network event with the "*sit" peer (the other parts are not used for now)


	}

	// TEST : no external transition unless we're passive
	if (this->state()==passive){
		holdIn( active, Time(0,0,0,120)); //wait 120ms before doing something
	}

	return *this ;
}

/*******************************************************************
* Function Name: internalFunction
********************************************************************/
Model &SimpleDemux::internalFunction( const InternalMessage & ){

	if (!EvQ.empty()) {
		// if any of the queues are not empty
	    	holdIn( active, Time(0,0,0,10)); // we wait 10ms to dequeue
	    	// that is, we only have a useless fixed timing between two messages getting through the network
	    } else {
	    	passivate(); // we just passivate immediately
	    }


	return *this;
}

/*******************************************************************
* Function Name: outputFunction
********************************************************************/
Model &SimpleDemux::outputFunction( const InternalMessage &msg )
{
	if(VERBOSE) cout<<"LTS: output coming...\n";
	if ( !EvQ.empty() ) // if we have messages to dequeue
        {
		long long message = buildNewMessage(EvQ.front().query, EvQ.front().id, EvQ.front().toId, EvQ.front().peerid, EvQ.front().TTL);
		int peer = EvQ.front().toId; // there's just one
				//NextOutput contains the next message to be output, to_peer the integer identifying the peer that the message is for
				//There should be as many output ports as there are peers.
				switch ( peer ) {